[tox]
minversion = 3.1.1
skipsdist = True
envlist = py36,py37,py38,py39,pypy3,pep8,limit,failskip,docs,py38-prefix,py38-limit,py38-verbosity,py38-failskip,py36-pytest,py37-pytest,py38-pytest,py39-pytest

[testenv]
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
allowlist_externals = rm
usedevelop = True
install_command = pip install --no-cache -U {opts} {packages}
commands =
    stestr run {posargs}
setenv = GABBI_PREFIX=
passenv = GABBI_*,HOME

[testenv:venv]
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
commands = {posargs}

[testenv:py36-pytest]
commands = py.test gabbi

[testenv:py37-pytest]
commands = py.test gabbi

[testenv:py38-pytest]
commands = py.test gabbi

[testenv:py39-pytest]
commands = py.test gabbi

[testenv:py38-prefix]
setenv = GABBI_PREFIX=/snoopy

[testenv:pep8]
basepython = python3
deps = hacking
commands =
    flake8

[testenv:py38-limit]
allowlist_externals = bash
commands = bash {toxinidir}/test-limit.sh

[testenv:py38-verbosity]
allowlist_externals = bash
commands = bash {toxinidir}/test-verbosity.sh

[testenv:py38-failskip]
allowlist_externals = bash
commands = bash {toxinidir}/test-failskip.sh

# Use pytest when in pypy3 because stestr fails on loading readline.
[testenv:pypy3]
commands = py.test gabbi

[testenv:cover]
basepython = python3
setenv =
    {[testenv]setenv}
    PYTHON=coverage run --source gabbi --parallel-mode
commands =
    coverage erase
    find . -type f -name "*.pyc" -delete
    stestr run {posargs}
    coverage combine
    coverage html -d cover
    coverage xml -o cover/coverage.xml
    coverage report

[testenv:pytest-cov]
basepython = python3
commands = py.test --cov=gabbi gabbi/tests --cov-config .coveragerc --cov-report html

[testenv:placement]
basepython = python3.8
deps =
    tox<4
    tox-wheel<0.6
    py
commands =
    # 创建并清空 src 目录
    - mkdir -p {envdir}/src
    - rm -rf {envdir}/src/*

    # 下载并解压 OpenStack Placement 源码
    - bash -c "curl -L https://tarballs.opendev.org/openstack/placement/placement-master.tar.gz | tar -C {envdir}/src -zx --strip-components 1"

    # 先构建 functional-py38 虚拟环境，但不运行测试
    - tox -c {envdir}/src -e functional-py38 --notest

    # 安装当前仓库代码到 functional-py38 虚拟环境，同时指定 coverage 版本避免冲突
    - {envdir}/src/.tox/functional-py38/bin/pip install -U {toxinidir} coverage==7.10.1

    # 运行 functional-py38 的 API 测试
    - tox -c {envdir}/src -e functional-py38 test_api
allowlist_externals =
    mkdir
    curl
    tar
    rm
    bash

[testenv:docs]
commands =
    rm -rf doc/build
    python setup.py build_sphinx
whitelist_externals =
    rm

[flake8]
exclude=.venv,.git,.tox,dist,*egg,*.egg-info,build,examples,docs
show-source = True
