name: CI

on:
  push:


jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: 2.7
            env:
              - AIO_AVAILABLE=false
              - COVERAGERC=".coveragerc-py2"
            runs-on: ubuntu-latest
          - python-version: 3.4
            env:
              - AIO_AVAILABLE=false
              - COVERAGERC=".coveragerc-py34"
            runs-on: ubuntu-latest
          - python-version: 3.5
            env:
              - AIO_AVAILABLE=false
              - COVERAGERC=".coveragerc"
            runs-on: ubuntu-latest
          - python-version: 3.6
            env:
              - AIO_AVAILABLE=true
              - COVERAGERC=".coveragerc"
            runs-on: ubuntu-latest
          - python-version: 3.7
            env:
              - AIO_AVAILABLE=true
              - COVERAGERC=".coveragerc"
            runs-on: ubuntu-16.04
          - python-version: 3.8
            env:
              - AIO_AVAILABLE=true
              - COVERAGERC=".coveragerc"
            runs-on: ubuntu-16.04
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -U pytest pytest-cov coveralls
          if [ "$AIO_AVAILABLE" = "true" ]; then pip install -U pytest-asyncio; fi
          pip install -e .
      - name: Run tests
        run: py.test --cov-config $COVERAGERC --cov=pydispatch
      - name: Upload coverage
        run: coveralls --rcfile="$COVERAGERC"

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          pip install -U pip setuptools wheel
          pip install -U twine
          pip install -e .
      - name: Build package
        run: python setup.py sdist bdist_wheel
      - name: Deploy to PyPI
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}